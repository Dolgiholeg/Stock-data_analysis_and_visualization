import yfinance as yf  # импорт библиотеки yfinance с использованием псевдонима yf - предоставляет доступ к финансовым данным из Yahoo Finance.


def fetch_stock_data(ticker, period='1mo'):
    """Получает исторические данные об акциях для указанного тикера и временного периода. Возвращает DataFrame с данными.
    Тикер — это краткое название в биржевой информации котируемых инструментов (акций, облигаций, индексов).
    Является уникальным идентификатором в рамках одной биржи или информационной системы. Используется для того,
    чтобы постоянно не печатать в сводках полное наименование ценных бумаг или других объектов торговли.
    DataFrame - структура хранения данных, организованных в двух изменениях(строках и столбцах)
    и соответствующих этим строкам и столбцам меток """
    stock = yf.Ticker(ticker)  # создаём объект модуля Ticker с заданным тикером.
    # Модуль Ticker позволяет получить список последних финансовых новостей по заданному тикеру.
    data = stock.history(period=period)  # получаем исторические данные об акциях для указанного тикера и временного периода.
    return data  # возвращаем DataFrame с данными


def add_moving_average(data, window_size=5):
    """Добавляет в DataFrame колонку со скользящим средним, рассчитанным на основе цен закрытия(столбец Close).
    Получает DataFrame с данными и размер окна window_size (количество наблюдений, включенных в среднее)
    Скользящее среднее (также называемое "простое скользящее среднее" или "конечное скользящее среднее")
    представляет собой среднее арифметическое значение наблюдений в определенном окне или периоде,
    который "скользит" вдоль временного ряда. Метод rolling(), создаёт скользящее окно для проведения операции на окне данных.
    Скользящее окно имеет размер window_size и перемещается по временному ряду с одним шагом за раз. Метод mean(),
    указывает, что скользящее среднего необходимо вычислить для конкретного элемента - столбца Close"""
    data['Moving_Average'] = data['Close'].rolling(window=window_size).mean()
    return data


def calculate_and_display_average_price(data):
    """Вычисляет и выводит среднюю цену закрытия акций за заданный период.
    Получает DataFrame с колонкой скользящего среднего значения столбца Close.
    Метод mean вычисляет среднее значение строк столбца Close. Параметр axis - определяет направление выполнения операций
    axis=0 - движение вниз по строкам"""
    average_price = data['Close'].mean(axis=0)
    print(f'СРЕДНЯЯ ЦЕНА ЗАКРЫТИЯ АКЦИЙ ЗА ЗАДАННЫЙ ПЕРИОД:":  {average_price}\n')
